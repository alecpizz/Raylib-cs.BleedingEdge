name: Build binding and shared natives
on:
  push:
    branches: [ 'main' ]
    paths:
      - 'Raylib-cs.BleedingEdge*/**'
      - 'raylib'
      - '.github/workflows/**'
  pull_request:
    branches: [ '*' ]
    paths:
      - 'Raylib-cs.BleedingEdge*/**'
      - 'raylib'
      - '.github/workflows/**'
jobs:
  prepare-package-info:
    runs-on: ubuntu-latest
    outputs:
      prefix: ${{ steps.package-info.outputs.prefix }}
      suffix: ${{ steps.package-info.outputs.suffix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup package info
        id: package-info
        shell: pwsh
        run: |
          $header = [System.IO.File]::ReadAllText('${{ github.workspace }}/raylib/src/raylib.h')

          # "(.*)\.(.*)" == "*.*" == "5.5-dev"
          if ( !($header -match '"(.*)\.(.*)"') )
          {
            exit 1
          }

          $version = $matches[0].substring(1, $matches[0].length - 2)
          $prefix = $version.substring(0, $version.indexof('-'))
          $suffix = ''
          if ( $version.contains('-') )
          {
            $suffix = $version.substring($version.indexof('-') + 1) + '-${{ github.run_number }}'
          }
          else
          {
            $suffix = '${{ github.run_number }}'
          }

          echo $prefix
          echo $suffix

          echo prefix=$prefix >> $env:GITHUB_OUTPUT
          echo suffix=$suffix >> $env:GITHUB_OUTPUT

  natives:
    strategy:
      matrix:
        name: [ 'linux-x64', 'osx-x64', 'osx-arm64', 'win-x64', 'win-x86' ]
        include:
          - name: 'linux-x64'
            os: 'ubuntu-latest'
            arch: 'x64'
          - name: 'osx-x64'
            os: 'macos-latest'
            arch: 'x86_64'
          - name: 'osx-arm64'
            os: 'macos-latest'
            arch: 'arm64'
          - name: 'win-x64'
            os: 'windows-latest'
            arch: 'x64'
          - name: 'win-x86'
            os: 'windows-latest'
            arch: 'win32'
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Setup compile dependencies
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install \
            libasound2-dev \
            libgl1-mesa-dev \
            libglu1-mesa-dev \
            libx11-dev \
            libxcursor-dev \
            libxi-dev \
            libxinerama-dev \
            libxkbcommon-dev
            libxrandr-dev \
            libwayland-dev \

      - name: Compile native
        run: dotnet build Raylib-cs.BleedingEdge.Native -c Release /p:BuildArch=${{ matrix.arch }}

      - name: Upload native
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-shared
          path: Raylib-cs.BleedingEdge.Native/bin/Release/runtimes/**
          if-no-files-found: 'error'
  
  pack-runtimes:
    runs-on: ubuntu-latest
    needs:
      - prepare-package-info
      - natives
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download shared natives
        uses: actions/download-artifact@v4
        with:
          pattern: '*-shared'
          path: Raylib-cs.BleedingEdge.Runtimes/runtimes
          merge-multiple: true

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Create NuGet package
        run: dotnet pack Raylib-cs.BleedingEdge.Runtimes /p:VersionPrefix=${{ needs.prepare-package-info.outputs.prefix }} --version-suffix ${{ needs.prepare-package-info.outputs.suffix }} -o nuget

      - name: Upload NuGet package artifact
        uses: actions/upload-artifact@v4
        with:
          name: Raylib-cs.BleedingEdge.Runtimes
          path: nuget/*

  pack-binding:
    runs-on: ubuntu-latest
    needs:
      - prepare-package-info
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Create NuGet package
        run: dotnet pack Raylib-cs.BleedingEdge /p:VersionPrefix=${{ needs.prepare-package-info.outputs.prefix }} --version-suffix ${{ needs.prepare-package-info.outputs.suffix }} -o nuget

      - name: Upload NuGet package artifact
        uses: actions/upload-artifact@v4
        with:
          name: Raylib-cs.BleedingEdge
          path: nuget/*
  
  upload-nuget-packages:
    runs-on: ubuntu-latest
    needs:
      - pack-runtimes
      - pack-binding
    steps:
      - name: Download NuGet package artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: Raylib-cs.BleedingEdge*
          path: nugets

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Upload artifacts to NuGet
        shell: pwsh
        run: |
          foreach ( $artifact in (Get-ChildItem 'nugets' -Recurse -Include *.nupkg) ) 
          {
            dotnet nuget push $artifact -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json --skip-duplicate
          }