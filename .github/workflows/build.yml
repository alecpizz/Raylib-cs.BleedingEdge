name: build.yml
on:
  push:
    branches: ['main']
    paths:
      - 'Raylib-cs.BleedingEdge/**'
      - 'Raylib-cs.BleedingEdge.Native/**'
      - 'raylib'
      - '.github/workflows/**'
  pull_request:
    branches: ['*']
    paths:
      - 'Raylib-cs.BleedingEdge/**'
      - 'Raylib-cs.BleedingEdge.Native/**'
      - 'raylib'
      - '.github/workflows/**'
jobs:
  natives-linux-x64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
      
      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      
      - name: Setup compile dependencies
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install \
            libasound2-dev \
            libx11-dev \
            libxrandr-dev \
            libxi-dev \
            libgl1-mesa-dev \
            libglu1-mesa-dev \
            libxcursor-dev \
            libxinerama-dev \
            libwayland-dev \
            libxkbcommon-dev
      
      - name: Compile shared native
        run: dotnet build Raylib-cs.BleedingEdge.Native -c Release
      
      - name: Upload shared native
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64-shared
          path: Raylib-cs.BleedingEdge.Native/bin/Release/libraylib.so
          if-no-files-found: 'error'
      
      - name: Cleanup
        shell: pwsh
        run: 'Remove-Item -Recurse -Force Raylib-cs.BleedingEdge.Native/obj/native-Release'
      
      - name: Compile static native
        run: dotnet build Raylib-cs.BleedingEdge.Native -c Release /p:CompileShared=false
      
      - name: Upload static native
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64-static
          path: Raylib-cs.BleedingEdge.Native/bin/Release/libraylib.a
          if-no-files-found: 'error'
  natives-osx:
    runs-on: macos-latest
    strategy: 
      matrix:
        name: ['arm64', 'x64']
        include:
          - name: 'arm64'
            arch: 'arm64'
          - name: 'x64'
            arch: 'x86_64'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
      
      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Compile shared native
        run: dotnet build Raylib-cs.BleedingEdge.Native -c Release /p:BuildArch=${{ matrix.arch }}

      - name: Upload shared native
        uses: actions/upload-artifact@v4
        with:
          name: osx-${{ matrix.name }}-shared
          path: Raylib-cs.BleedingEdge.Native/bin/Release/libraylib.dylib
          if-no-files-found: 'error'
      
      - name: Cleanup
        shell: pwsh
        run: 'Remove-Item -Recurse -Force Raylib-cs.BleedingEdge.Native/obj/native-Release'

      - name: Compile static native
        run: dotnet build Raylib-cs.BleedingEdge.Native -c Release /p:BuildArch=${{ matrix.arch }} /p:CompileShared=false

      - name: Upload static native
        uses: actions/upload-artifact@v4
        with:
          name: osx-${{ matrix.name }}-static
          path: Raylib-cs.BleedingEdge.Native/bin/Release/libraylib.a
          if-no-files-found: 'error'
  
  natives-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        name: ['x86', 'x64']
        include:
          - name: 'x86'
            arch: 'win32'
          - name: 'x64'
            arch: 'x64'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Compile shared native
        run: dotnet build Raylib-cs.BleedingEdge.Native -c Release /p:BuildArch=${{ matrix.arch }}

      - name: Upload shared native
        uses: actions/upload-artifact@v4
        with:
          name: win-${{ matrix.name }}-shared
          path: Raylib-cs.BleedingEdge.Native/bin/Release/raylib.dll
          if-no-files-found: 'error'

      - name: Cleanup
        shell: pwsh
        run: 'Remove-Item -Recurse -Force Raylib-cs.BleedingEdge.Native/obj/native-Release'

      - name: Compile static native
        run: dotnet build Raylib-cs.BleedingEdge.Native -c Release /p:BuildArch=${{ matrix.arch }} /p:CompileShared=false

      - name: Upload static native
        uses: actions/upload-artifact@v4
        with:
          name: win-${{ matrix.name }}-static
          path: Raylib-cs.BleedingEdge.Native/bin/Release/raylib.lib
          if-no-files-found: 'error'
  
  prepare-package-info:
    runs-on: ubuntu-latest
    outputs: 
      prefix: ${{ steps.package-info.outputs.prefix }}
      suffix: ${{ steps.package-info.outputs.suffix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
      
      - name: Setup package info
        id: package-info
        shell: pwsh
        run: |
          $header = [System.IO.File]::ReadAllText('${{ github.workspace }}/raylib/src/raylib.h')
          
          # "(.*)\.(.*)" == "*.*" == "5.5-dev"
          if ( !($header -match '"(.*)\.(.*)"') )
          {
            exit 1
          }
          
          $version = $matches[0].substring(1, $matches[0].length - 2)
          $prefix = $version.substring(0, $version.indexof('-'))
          $suffix = ''
          if ( $version.contains('-') )
          {
            $suffix = $version.substring($version.indexof('-') + 1) + '-${{ github.run_number }}'
          }
          else
          {
            $suffix = '${{ github.run_number }}'
          }
          
          echo $prefix
          echo $suffix
          
          echo prefix=$prefix >> $env:GITHUB_OUTPUT
          echo suffix=$suffix >> $env:GITHUB_OUTPUT
      - name: sanity check
        shell: pwsh
        run: |
          echo ${{ steps.package-info.outputs.prefix }}
          echo ${{ steps.package-info.outputs.suffix }}
          echo Get-Content -Path $env:GITHUB_OUTPUT -Raw
          
  
  pack-shared-runtimes:
    runs-on: ubuntu-latest
    needs:
      - prepare-package-info
      - natives-linux-x64
      - natives-osx
      - natives-windows
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download linux-x64 native
        uses: actions/download-artifact@v4
        with:
          name: linux-x64-shared
          path: Raylib-cs.BleedingEdge.Runtimes.Shared/runtimes/linux-x64/native

      - name: Download osx-arm64 native
        uses: actions/download-artifact@v4
        with:
          name: osx-arm64-shared
          path: Raylib-cs.BleedingEdge.Runtimes.Shared/runtimes/osx-arm64/native

      - name: Download osx-x64 native
        uses: actions/download-artifact@v4
        with:
          name: osx-x64-shared
          path: Raylib-cs.BleedingEdge.Runtimes.Shared/runtimes/osx-x64/native

      - name: Download win-x86 native
        uses: actions/download-artifact@v4
        with:
          name: win-x86-shared
          path: Raylib-cs.BleedingEdge.Runtimes.Shared/runtimes/win-x86/native

      - name: Download win-x64 native
        uses: actions/download-artifact@v4
        with:
          name: win-x64-shared
          path: Raylib-cs.BleedingEdge.Runtimes.Shared/runtimes/win-x64/native
      
      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      
      - name: Create NuGet package
        run: dotnet pack Raylib-cs.BleedingEdge.Runtimes.Shared /p:VersionPrefix=${{ needs.prepare-package-info.outputs.prefix }} --version-suffix ${{ needs.prepare-package-info.outputs.suffix }} -o nuget
      
      - name: Upload NuGet package artifact
        uses: actions/upload-artifact@v4
        with:
          name: Raylib-cs.BleedingEdge.Runtimes.Shared
          path: nuget/*

  pack-static-runtimes:
    runs-on: ubuntu-latest
    needs:
      - prepare-package-info
      - natives-linux-x64
      - natives-osx
      - natives-windows
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download linux-x64 native
        uses: actions/download-artifact@v4
        with:
          name: linux-x64-static
          path: Raylib-cs.BleedingEdge.Runtimes.Static/static-runtimes/linux-x64

      - name: Download osx-arm64 native
        uses: actions/download-artifact@v4
        with:
          name: osx-arm64-static
          path: Raylib-cs.BleedingEdge.Runtimes.Static/static-runtimes/osx-arm64

      - name: Download osx-x64 native
        uses: actions/download-artifact@v4
        with:
          name: osx-x64-static
          path: Raylib-cs.BleedingEdge.Runtimes.Static/static-runtimes/osx-x64

      - name: Download win-x86 native
        uses: actions/download-artifact@v4
        with:
          name: win-x86-static
          path: Raylib-cs.BleedingEdge.Runtimes.Static/static-runtimes/win-x86

      - name: Download win-x64 native
        uses: actions/download-artifact@v4
        with:
          name: win-x64-static
          path: Raylib-cs.BleedingEdge.Runtimes.Static/static-runtimes/win-x64

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Create NuGet package
        run: dotnet pack Raylib-cs.BleedingEdge.Runtimes.Static /p:VersionPrefix=${{ needs.prepare-package-info.outputs.prefix }} --version-suffix ${{ needs.prepare-package-info.outputs.suffix }} -o nuget

      - name: Upload NuGet package artifact
        uses: actions/upload-artifact@v4
        with:
          name: Raylib-cs.BleedingEdge.Runtimes.Static
          path: nuget/*
  
  pack-binding:
    runs-on: ubuntu-latest
    needs:
      - prepare-package-info
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      
      - name: Create NuGet package
        run: dotnet pack Raylib-cs.BleedingEdge /p:VersionPrefix=${{ needs.prepare-package-info.outputs.prefix }} --version-suffix ${{ needs.prepare-package-info.outputs.suffix }} -o nuget
      
      - name: Upload NuGet package artifact
        uses: actions/upload-artifact@v4
        with:
          name: Raylib-cs.BleedingEdge
          path: nuget/*
  
  pack-meta-packages:
    runs-on: ubuntu-latest
    needs:
      - prepare-package-info
      - pack-shared-runtimes
      - pack-static-runtimes
      - pack-binding
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Create .Shared NuGet package
        run: dotnet pack Raylib-cs.BleedingEdge.Shared /p:VersionPrefix=${{ needs.prepare-package-info.outputs.prefix }} --version-suffix ${{ needs.prepare-package-info.outputs.suffix }} -o nuget-shared

      - name: Upload .Shared NuGet package artifact
        uses: actions/upload-artifact@v4
        with:
          name: Raylib-cs.BleedingEdge.Shared
          path: nuget-shared/*

      - name: Create .Static NuGet package
        run: dotnet pack Raylib-cs.BleedingEdge.Static /p:VersionPrefix=${{ needs.prepare-package-info.outputs.prefix }} --version-suffix ${{ needs.prepare-package-info.outputs.suffix }} -o nuget-static

      - name: Upload .Static NuGet package artifact
        uses: actions/upload-artifact@v4
        with:
          name: Raylib-cs.BleedingEdge.Static
          path: nuget-static/*
  
  upload-nuget-packages:
    runs-on: ubuntu-latest
    needs:
      - pack-shared-runtimes
      - pack-static-runtimes
      - pack-binding
      - pack-meta-packages
    steps:
      - name: Download NuGet package artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: Raylib-cs.BleedingEdge*
          path: nugets
      
      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      
      - name: Upload artifacts to NuGet
        shell: pwsh
        run: |
          foreach ( $artifact in (Get-ChildItem 'nugets' -Recurse -Include *.nupkg) ) 
          {
            dotnet nuget push $artifact -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json --skip-duplicate
          }